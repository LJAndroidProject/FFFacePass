package megvii.testfacepass.independent.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ERROR_MESSAGE".
*/
public class ErrorMessageDao extends AbstractDao<ErrorMessage, Long> {

    public static final String TABLENAME = "ERROR_MESSAGE";

    /**
     * Properties of entity ErrorMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ErrorId = new Property(0, Long.class, "errorId", true, "_id");
        public final static Property ErrorDescribe = new Property(1, String.class, "errorDescribe", false, "ERROR_DESCRIBE");
        public final static Property ErrorTime = new Property(2, long.class, "errorTime", false, "ERROR_TIME");
        public final static Property ErrorType = new Property(3, String.class, "errorType", false, "ERROR_TYPE");
        public final static Property ErrorDoor = new Property(4, int.class, "errorDoor", false, "ERROR_DOOR");
    }


    public ErrorMessageDao(DaoConfig config) {
        super(config);
    }
    
    public ErrorMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ERROR_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: errorId
                "\"ERROR_DESCRIBE\" TEXT," + // 1: errorDescribe
                "\"ERROR_TIME\" INTEGER NOT NULL ," + // 2: errorTime
                "\"ERROR_TYPE\" TEXT," + // 3: errorType
                "\"ERROR_DOOR\" INTEGER NOT NULL );"); // 4: errorDoor
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ERROR_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ErrorMessage entity) {
        stmt.clearBindings();
 
        Long errorId = entity.getErrorId();
        if (errorId != null) {
            stmt.bindLong(1, errorId);
        }
 
        String errorDescribe = entity.getErrorDescribe();
        if (errorDescribe != null) {
            stmt.bindString(2, errorDescribe);
        }
        stmt.bindLong(3, entity.getErrorTime());
 
        String errorType = entity.getErrorType();
        if (errorType != null) {
            stmt.bindString(4, errorType);
        }
        stmt.bindLong(5, entity.getErrorDoor());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ErrorMessage entity) {
        stmt.clearBindings();
 
        Long errorId = entity.getErrorId();
        if (errorId != null) {
            stmt.bindLong(1, errorId);
        }
 
        String errorDescribe = entity.getErrorDescribe();
        if (errorDescribe != null) {
            stmt.bindString(2, errorDescribe);
        }
        stmt.bindLong(3, entity.getErrorTime());
 
        String errorType = entity.getErrorType();
        if (errorType != null) {
            stmt.bindString(4, errorType);
        }
        stmt.bindLong(5, entity.getErrorDoor());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ErrorMessage readEntity(Cursor cursor, int offset) {
        ErrorMessage entity = new ErrorMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // errorId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // errorDescribe
            cursor.getLong(offset + 2), // errorTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // errorType
            cursor.getInt(offset + 4) // errorDoor
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ErrorMessage entity, int offset) {
        entity.setErrorId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setErrorDescribe(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setErrorTime(cursor.getLong(offset + 2));
        entity.setErrorType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setErrorDoor(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ErrorMessage entity, long rowId) {
        entity.setErrorId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ErrorMessage entity) {
        if(entity != null) {
            return entity.getErrorId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ErrorMessage entity) {
        return entity.getErrorId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
