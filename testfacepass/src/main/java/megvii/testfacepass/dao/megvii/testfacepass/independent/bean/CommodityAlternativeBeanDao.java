package megvii.testfacepass.independent.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMODITY_ALTERNATIVE_BEAN".
*/
public class CommodityAlternativeBeanDao extends AbstractDao<CommodityAlternativeBean, Void> {

    public static final String TABLENAME = "COMMODITY_ALTERNATIVE_BEAN";

    /**
     * Properties of entity CommodityAlternativeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CommodityID = new Property(0, Long.class, "commodityID", false, "COMMODITY_ID");
        public final static Property CommodityMoney = new Property(1, double.class, "commodityMoney", false, "COMMODITY_MONEY");
        public final static Property CommodityName = new Property(2, String.class, "commodityName", false, "COMMODITY_NAME");
        public final static Property CanUserIntegral = new Property(3, boolean.class, "canUserIntegral", false, "CAN_USER_INTEGRAL");
        public final static Property IntegralNumber = new Property(4, int.class, "integralNumber", false, "INTEGRAL_NUMBER");
        public final static Property ShelvesOf = new Property(5, boolean.class, "shelvesOf", false, "SHELVES_OF");
        public final static Property ImageUrl = new Property(6, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property ExpirationDate = new Property(7, long.class, "expirationDate", false, "EXPIRATION_DATE");
    }


    public CommodityAlternativeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CommodityAlternativeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMODITY_ALTERNATIVE_BEAN\" (" + //
                "\"COMMODITY_ID\" INTEGER UNIQUE ," + // 0: commodityID
                "\"COMMODITY_MONEY\" REAL NOT NULL ," + // 1: commodityMoney
                "\"COMMODITY_NAME\" TEXT," + // 2: commodityName
                "\"CAN_USER_INTEGRAL\" INTEGER NOT NULL ," + // 3: canUserIntegral
                "\"INTEGRAL_NUMBER\" INTEGER NOT NULL ," + // 4: integralNumber
                "\"SHELVES_OF\" INTEGER NOT NULL ," + // 5: shelvesOf
                "\"IMAGE_URL\" TEXT," + // 6: imageUrl
                "\"EXPIRATION_DATE\" INTEGER NOT NULL );"); // 7: expirationDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMODITY_ALTERNATIVE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommodityAlternativeBean entity) {
        stmt.clearBindings();
 
        Long commodityID = entity.getCommodityID();
        if (commodityID != null) {
            stmt.bindLong(1, commodityID);
        }
        stmt.bindDouble(2, entity.getCommodityMoney());
 
        String commodityName = entity.getCommodityName();
        if (commodityName != null) {
            stmt.bindString(3, commodityName);
        }
        stmt.bindLong(4, entity.getCanUserIntegral() ? 1L: 0L);
        stmt.bindLong(5, entity.getIntegralNumber());
        stmt.bindLong(6, entity.getShelvesOf() ? 1L: 0L);
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(7, imageUrl);
        }
        stmt.bindLong(8, entity.getExpirationDate());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommodityAlternativeBean entity) {
        stmt.clearBindings();
 
        Long commodityID = entity.getCommodityID();
        if (commodityID != null) {
            stmt.bindLong(1, commodityID);
        }
        stmt.bindDouble(2, entity.getCommodityMoney());
 
        String commodityName = entity.getCommodityName();
        if (commodityName != null) {
            stmt.bindString(3, commodityName);
        }
        stmt.bindLong(4, entity.getCanUserIntegral() ? 1L: 0L);
        stmt.bindLong(5, entity.getIntegralNumber());
        stmt.bindLong(6, entity.getShelvesOf() ? 1L: 0L);
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(7, imageUrl);
        }
        stmt.bindLong(8, entity.getExpirationDate());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CommodityAlternativeBean readEntity(Cursor cursor, int offset) {
        CommodityAlternativeBean entity = new CommodityAlternativeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // commodityID
            cursor.getDouble(offset + 1), // commodityMoney
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // commodityName
            cursor.getShort(offset + 3) != 0, // canUserIntegral
            cursor.getInt(offset + 4), // integralNumber
            cursor.getShort(offset + 5) != 0, // shelvesOf
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imageUrl
            cursor.getLong(offset + 7) // expirationDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommodityAlternativeBean entity, int offset) {
        entity.setCommodityID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCommodityMoney(cursor.getDouble(offset + 1));
        entity.setCommodityName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCanUserIntegral(cursor.getShort(offset + 3) != 0);
        entity.setIntegralNumber(cursor.getInt(offset + 4));
        entity.setShelvesOf(cursor.getShort(offset + 5) != 0);
        entity.setImageUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExpirationDate(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CommodityAlternativeBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CommodityAlternativeBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(CommodityAlternativeBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
