package megvii.testfacepass.independent.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ERROR_REPORT_BEAN".
*/
public class ErrorReportBeanDao extends AbstractDao<ErrorReportBean, Long> {

    public static final String TABLENAME = "ERROR_REPORT_BEAN";

    /**
     * Properties of entity ErrorReportBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ErrorId = new Property(0, Long.class, "errorId", true, "_id");
        public final static Property OrderNumber = new Property(1, String.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property DoorNumber = new Property(2, int.class, "doorNumber", false, "DOOR_NUMBER");
        public final static Property Data = new Property(3, String.class, "data", false, "DATA");
        public final static Property OrderString = new Property(4, String.class, "orderString", false, "ORDER_STRING");
        public final static Property DeviceId = new Property(5, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property Time = new Property(6, long.class, "time", false, "TIME");
        public final static Property Msg = new Property(7, String.class, "msg", false, "MSG");
    }


    public ErrorReportBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ErrorReportBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ERROR_REPORT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: errorId
                "\"ORDER_NUMBER\" TEXT," + // 1: orderNumber
                "\"DOOR_NUMBER\" INTEGER NOT NULL ," + // 2: doorNumber
                "\"DATA\" TEXT," + // 3: data
                "\"ORDER_STRING\" TEXT," + // 4: orderString
                "\"DEVICE_ID\" TEXT," + // 5: deviceId
                "\"TIME\" INTEGER NOT NULL ," + // 6: time
                "\"MSG\" TEXT);"); // 7: msg
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ERROR_REPORT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ErrorReportBean entity) {
        stmt.clearBindings();
 
        Long errorId = entity.getErrorId();
        if (errorId != null) {
            stmt.bindLong(1, errorId);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(2, orderNumber);
        }
        stmt.bindLong(3, entity.getDoorNumber());
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(4, data);
        }
 
        String orderString = entity.getOrderString();
        if (orderString != null) {
            stmt.bindString(5, orderString);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(6, deviceId);
        }
        stmt.bindLong(7, entity.getTime());
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(8, msg);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ErrorReportBean entity) {
        stmt.clearBindings();
 
        Long errorId = entity.getErrorId();
        if (errorId != null) {
            stmt.bindLong(1, errorId);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(2, orderNumber);
        }
        stmt.bindLong(3, entity.getDoorNumber());
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(4, data);
        }
 
        String orderString = entity.getOrderString();
        if (orderString != null) {
            stmt.bindString(5, orderString);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(6, deviceId);
        }
        stmt.bindLong(7, entity.getTime());
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(8, msg);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ErrorReportBean readEntity(Cursor cursor, int offset) {
        ErrorReportBean entity = new ErrorReportBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // errorId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderNumber
            cursor.getInt(offset + 2), // doorNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // data
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // orderString
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deviceId
            cursor.getLong(offset + 6), // time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // msg
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ErrorReportBean entity, int offset) {
        entity.setErrorId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDoorNumber(cursor.getInt(offset + 2));
        entity.setData(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrderString(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeviceId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.getLong(offset + 6));
        entity.setMsg(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ErrorReportBean entity, long rowId) {
        entity.setErrorId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ErrorReportBean entity) {
        if(entity != null) {
            return entity.getErrorId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ErrorReportBean entity) {
        return entity.getErrorId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
