package megvii.testfacepass.independent.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import megvii.testfacepass.independent.bean.CommodityBean.CatConverter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMODITY_BEAN".
*/
public class CommodityBeanDao extends AbstractDao<CommodityBean, Void> {

    public static final String TABLENAME = "COMMODITY_BEAN";

    /**
     * Properties of entity CommodityBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CommodityID = new Property(0, long.class, "commodityID", false, "COMMODITY_ID");
        public final static Property CommodityAlternativeBean = new Property(1, String.class, "commodityAlternativeBean", false, "COMMODITY_ALTERNATIVE_BEAN");
        public final static Property CupboardNumber = new Property(2, long.class, "cupboardNumber", false, "CUPBOARD_NUMBER");
        public final static Property TierNumber = new Property(3, long.class, "tierNumber", false, "TIER_NUMBER");
        public final static Property TierChildrenNumber = new Property(4, int.class, "tierChildrenNumber", false, "TIER_CHILDREN_NUMBER");
        public final static Property TierChildrenCommodityNumber = new Property(5, int.class, "tierChildrenCommodityNumber", false, "TIER_CHILDREN_COMMODITY_NUMBER");
        public final static Property DateInProduced = new Property(6, long.class, "dateInProduced", false, "DATE_IN_PRODUCED");
        public final static Property AddTime = new Property(7, long.class, "addTime", false, "ADD_TIME");
    }

    private final CatConverter commodityAlternativeBeanConverter = new CatConverter();

    public CommodityBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CommodityBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMODITY_BEAN\" (" + //
                "\"COMMODITY_ID\" INTEGER NOT NULL ," + // 0: commodityID
                "\"COMMODITY_ALTERNATIVE_BEAN\" TEXT," + // 1: commodityAlternativeBean
                "\"CUPBOARD_NUMBER\" INTEGER NOT NULL ," + // 2: cupboardNumber
                "\"TIER_NUMBER\" INTEGER NOT NULL ," + // 3: tierNumber
                "\"TIER_CHILDREN_NUMBER\" INTEGER NOT NULL ," + // 4: tierChildrenNumber
                "\"TIER_CHILDREN_COMMODITY_NUMBER\" INTEGER NOT NULL ," + // 5: tierChildrenCommodityNumber
                "\"DATE_IN_PRODUCED\" INTEGER NOT NULL ," + // 6: dateInProduced
                "\"ADD_TIME\" INTEGER NOT NULL );"); // 7: addTime
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_COMMODITY_BEAN_CUPBOARD_NUMBER_TIER_NUMBER_TIER_CHILDREN_NUMBER_TIER_CHILDREN_COMMODITY_NUMBER ON \"COMMODITY_BEAN\"" +
                " (\"CUPBOARD_NUMBER\" ASC,\"TIER_NUMBER\" ASC,\"TIER_CHILDREN_NUMBER\" ASC,\"TIER_CHILDREN_COMMODITY_NUMBER\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMODITY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommodityBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCommodityID());
 
        CommodityAlternativeBean commodityAlternativeBean = entity.getCommodityAlternativeBean();
        if (commodityAlternativeBean != null) {
            stmt.bindString(2, commodityAlternativeBeanConverter.convertToDatabaseValue(commodityAlternativeBean));
        }
        stmt.bindLong(3, entity.getCupboardNumber());
        stmt.bindLong(4, entity.getTierNumber());
        stmt.bindLong(5, entity.getTierChildrenNumber());
        stmt.bindLong(6, entity.getTierChildrenCommodityNumber());
        stmt.bindLong(7, entity.getDateInProduced());
        stmt.bindLong(8, entity.getAddTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommodityBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCommodityID());
 
        CommodityAlternativeBean commodityAlternativeBean = entity.getCommodityAlternativeBean();
        if (commodityAlternativeBean != null) {
            stmt.bindString(2, commodityAlternativeBeanConverter.convertToDatabaseValue(commodityAlternativeBean));
        }
        stmt.bindLong(3, entity.getCupboardNumber());
        stmt.bindLong(4, entity.getTierNumber());
        stmt.bindLong(5, entity.getTierChildrenNumber());
        stmt.bindLong(6, entity.getTierChildrenCommodityNumber());
        stmt.bindLong(7, entity.getDateInProduced());
        stmt.bindLong(8, entity.getAddTime());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CommodityBean readEntity(Cursor cursor, int offset) {
        CommodityBean entity = new CommodityBean( //
            cursor.getLong(offset + 0), // commodityID
            cursor.isNull(offset + 1) ? null : commodityAlternativeBeanConverter.convertToEntityProperty(cursor.getString(offset + 1)), // commodityAlternativeBean
            cursor.getLong(offset + 2), // cupboardNumber
            cursor.getLong(offset + 3), // tierNumber
            cursor.getInt(offset + 4), // tierChildrenNumber
            cursor.getInt(offset + 5), // tierChildrenCommodityNumber
            cursor.getLong(offset + 6), // dateInProduced
            cursor.getLong(offset + 7) // addTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommodityBean entity, int offset) {
        entity.setCommodityID(cursor.getLong(offset + 0));
        entity.setCommodityAlternativeBean(cursor.isNull(offset + 1) ? null : commodityAlternativeBeanConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setCupboardNumber(cursor.getLong(offset + 2));
        entity.setTierNumber(cursor.getLong(offset + 3));
        entity.setTierChildrenNumber(cursor.getInt(offset + 4));
        entity.setTierChildrenCommodityNumber(cursor.getInt(offset + 5));
        entity.setDateInProduced(cursor.getLong(offset + 6));
        entity.setAddTime(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CommodityBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CommodityBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(CommodityBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
