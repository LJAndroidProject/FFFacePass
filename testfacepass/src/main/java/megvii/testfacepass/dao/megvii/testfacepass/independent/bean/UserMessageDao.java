package megvii.testfacepass.independent.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_MESSAGE".
*/
public class UserMessageDao extends AbstractDao<UserMessage, Long> {

    public static final String TABLENAME = "USER_MESSAGE";

    /**
     * Properties of entity UserMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LocalId = new Property(0, Long.class, "localId", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property FaceToken = new Property(2, String.class, "faceToken", false, "FACE_TOKEN");
        public final static Property LastUsedTime = new Property(3, long.class, "lastUsedTime", false, "LAST_USED_TIME");
        public final static Property UsedNumber = new Property(4, int.class, "usedNumber", false, "USED_NUMBER");
        public final static Property RegisterTime = new Property(5, long.class, "registerTime", false, "REGISTER_TIME");
    }


    public UserMessageDao(DaoConfig config) {
        super(config);
    }
    
    public UserMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: localId
                "\"USER_ID\" INTEGER NOT NULL UNIQUE ," + // 1: userId
                "\"FACE_TOKEN\" TEXT UNIQUE ," + // 2: faceToken
                "\"LAST_USED_TIME\" INTEGER NOT NULL ," + // 3: lastUsedTime
                "\"USED_NUMBER\" INTEGER NOT NULL ," + // 4: usedNumber
                "\"REGISTER_TIME\" INTEGER NOT NULL );"); // 5: registerTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserMessage entity) {
        stmt.clearBindings();
 
        Long localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindLong(1, localId);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String faceToken = entity.getFaceToken();
        if (faceToken != null) {
            stmt.bindString(3, faceToken);
        }
        stmt.bindLong(4, entity.getLastUsedTime());
        stmt.bindLong(5, entity.getUsedNumber());
        stmt.bindLong(6, entity.getRegisterTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserMessage entity) {
        stmt.clearBindings();
 
        Long localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindLong(1, localId);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String faceToken = entity.getFaceToken();
        if (faceToken != null) {
            stmt.bindString(3, faceToken);
        }
        stmt.bindLong(4, entity.getLastUsedTime());
        stmt.bindLong(5, entity.getUsedNumber());
        stmt.bindLong(6, entity.getRegisterTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserMessage readEntity(Cursor cursor, int offset) {
        UserMessage entity = new UserMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // localId
            cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // faceToken
            cursor.getLong(offset + 3), // lastUsedTime
            cursor.getInt(offset + 4), // usedNumber
            cursor.getLong(offset + 5) // registerTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserMessage entity, int offset) {
        entity.setLocalId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setFaceToken(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastUsedTime(cursor.getLong(offset + 3));
        entity.setUsedNumber(cursor.getInt(offset + 4));
        entity.setRegisterTime(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserMessage entity, long rowId) {
        entity.setLocalId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserMessage entity) {
        if(entity != null) {
            return entity.getLocalId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserMessage entity) {
        return entity.getLocalId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
